using DevExpress.CodeParser;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraReports.UI;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Drive.v3;
using Google.Apis.Services;
using Google.Apis.Upload;
using Google.Apis.Util.Store;
using System.Data.SqlClient;
using DevExpress.XtraEditors.Repository;
using Google.Apis.Http;
using System.Net.Http;
namespace Ext
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        static string[] Scopes = { DriveService.Scope.DriveFile };
        static string ApplicationName = "ext";
        int idperson = 0; 
        DateTime targetDate = DateTime.Now.Date;

        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
           
            // This line of code is generated by Data Source Configuration Wizard
            tabextTableAdapter.Fill(dbex.tabext);
            
        }
        public static void UploadFile(string filePath)
        {
            UserCredential credential;

            using (var stream =
                new FileStream("credentials.json", FileMode.Open, FileAccess.Read))
            {
                string credPath = "token.json";
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
            }

            // Create Drive API service.
            var service = new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = ApplicationName,
            });

            var fileMetadata = new Google.Apis.Drive.v3.Data.File()
            {
                Name = Path.GetFileName(filePath)
            };
            FilesResource.CreateMediaUpload request;
            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                request = service.Files.Create(
                    fileMetadata, stream, "application/octet-stream");
                request.Fields = "id";
                request.Upload();
            }

            var file = request.ResponseBody;
            MessageBox.Show($"File ID: {file.Id}");
        }
        public static void BackupDatabase(string connectionString, string databaseName, string backupFilePath)
        {
            using (var connection = new SqlConnection(connectionString))
            {
                var query = $"BACKUP DATABASE [{databaseName}] TO DISK='{backupFilePath}'";

                using (var command = new SqlCommand(query, connection))
                {
                    connection.Open();
                    command.ExecuteNonQuery();
                    Console.WriteLine("Database backup completed successfully.");
                }
            }
        }

        private  void Form1_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'dbex.tabext' table. You can move, or remove it, as needed.


            // await Task.Delay(500);
            try
            {
               
               
                lastclient.Caption = tabextTableAdapter.getlastclient().ToString();
                neastclientlbl.Caption = tabextTableAdapter.gettheneastclienttocome().ToString(); 


            }
            catch (Exception ex )
            {
                MessageBox.Show(ex.Message); 
               
            }
          
            
        }
        private void SmsTimer_Tick(object sender, EventArgs e)
        {
            CheckAndSendSms();


        }
        private void CheckAndSendSms()
        {
            string filePath = "sentNumbers.txt";
            
            // Ensure the file exists before reading it
            if (!File.Exists(filePath))
            {
                File.Create(filePath).Dispose();
            }

            // Read all phone numbers from the file
            var sentNumbers = File.ReadAllLines(filePath).ToList();
            if (gridView1.RowCount <  1)
            {
                return; 
            }
            for (int i = 0; i < gridView1.RowCount; i++)
            {
                var rowHandle = gridView1.GetRowHandle(i);
                if (!gridView1.IsDataRow(rowHandle))
                    continue;

                var row = gridView1.GetDataRow(rowHandle);

                DateTime expirationDate = Convert.ToDateTime(row["dateexprimitation"]).AddDays(10).Date;

                if (targetDate == expirationDate)
                {
                    string phoneNumber = row["phone"].ToString();

                    // Check if the phone number is already in the list
                    if (!sentNumbers.Contains(phoneNumber))
                    {
                        string formattedDate = Convert.ToDateTime(row["dateexprimitation"]).ToString("dd-MM-yyyy");
                         string message = "محطة بكوش نجيب:من أجل سلامتكم نذكركم أن نهاية صلاحية قارورة الإطفاء الخاصة بكم  " + formattedDate + "نرجوالتقرب لمحلنا لصيانتها";
                        // string message = "محطة بكوش نجيب:من أجل سلامتكم نذكركم أن نهاية صلاحية قارورة الإطفاء الخاصة بكم نرجوالتقرب لمحلنا لصيانتها";

                        // string message = "sdfsdfsdfsd"; 
                        //   MessageBox.Show(  message);
                        SendSms(phoneNumber ,message );
                     
                        insertinmessagetb(Convert.ToInt32(row["Id"].ToString()), message ); 
                        // Add the phone number to the list
                        sentNumbers.Add(phoneNumber);
                        barButtonItem6.Visibility = BarItemVisibility.Always;
                        //timer2.Enabled = true; 
                        // Write the updated list back to the file
                        File.AppendAllLines(filePath, new[] { phoneNumber });

                        Thread.Sleep(10000);
                        closapp();
                        return;
                    }
                }
            }
        }

        private void insertinmessagetb(int idp ,string message)
        {
           // string message = "محطة بكوش نجيب:من أجل سلامتكم نذكركم أن نهاية صلاحية قارورة الإطفاء الخاصة بكم / ذكر التاريخ ان  أمكن/نرجوالتقرب لمحلنا لصيانتها";

            messagesTableAdapter1.Insert(message, idp, targetDate);
            messagesTableAdapter1.Fill(dbex.messages);
            saveall(); 

        }
        private void saveall()
        {
            this.Validate();
            dbexBindingSource.EndEdit(); 
            // End edit on the binding source to push the changes to the dataset
            messagesBindingSource.EndEdit();

            // Update the dataset using the table adapter manager
            tableAdapterManager.UpdateAll(dbex);
            messagesTableAdapter1.Fill(dbex.messages);

            tabextTableAdapter.Fill(dbex.tabext); 
        }
        private void SendSms(string phoneNumber, string message)
        {
            string sendCommand = $"adb shell am start -n \"khicha.dr.smsapp/.MainActivity\" --es \"phone\" \"{phoneNumber}\" --es \"message\" \"\"\"{message}\"\"\"";
            string closeCommand = "adb shell am force-stop khicha.dr.smsapp";

            var processInfo = new System.Diagnostics.ProcessStartInfo("cmd.exe", "/C " + sendCommand)
            {
                CreateNoWindow = false,  // Do not create a window
                UseShellExecute = true, // Do not use the OS shell
                WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal // Ensure the window is hidden
            };

            using (var process = System.Diagnostics.Process.Start(processInfo))
            {
                process.WaitForExit(); // Wait for the process to exit, ensuring the command completes
            }

            // Now close the app
            processInfo = new System.Diagnostics.ProcessStartInfo("cmd.exe", "/C " + closeCommand)
            {
                CreateNoWindow = false,  // Do not create a window
                UseShellExecute = true, // Do not use the OS shell
                WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal // Ensure the window is hidden
            };

            using (var process = System.Diagnostics.Process.Start(processInfo))
            {
                process.WaitForExit(); // Wait for the process to exit, ensuring the command completes
            }
           

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            if (gridView1.GetSelectedRows().Length > 0)
            {
                // Get the selected row's handle
                int selectedRowHandle = gridView1.GetSelectedRows()[0];

                // Get the value of the 'idperson' column from the selected row
                int idperson = Convert.ToInt32(gridView1.GetRowCellValue(selectedRowHandle, "Id"));

                // Create an instance of your smssender form
                smssender smssenderForm = new smssender();

                // Set the idperson in the smssender form
                smssenderForm.idperson = idperson;

                // Optionally set the client name or any other relevant information
                smssenderForm.clientname.Text = ClientTextEdit.Text;

                // Show the smssender form
                smssenderForm.ShowDialog();
            }
        }

        private void barButtonItem2_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            addext addext = new addext();
            addext.ShowDialog();
            tabextTableAdapter.Fill(dbex.tabext); 
        }

        private void gridView1_DoubleClick(object sender, EventArgs e)
        {
            int rowHandle = gridView1.FocusedRowHandle;

            // Get the selected row's data
            DataRow selectedRow = gridView1.GetDataRow(rowHandle);

            if (selectedRow != null)


            {
                var x = dbexBindingSource.Position;


                addext addext = new addext();

                addext.Pz = x; 
                
                addext.ShowDialog(); 

            tabextTableAdapter.Fill(dbex.tabext);

            }
        }

        private void barButtonItem4_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            smssender smssender = new smssender();
            smssender.ShowDialog(); 
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
                 string message = "محطة بكوش نجيب:من أجل سلامتكم نذكركم أن نهاية صلاحية قارورة الإطفاء الخاصة بكم  نرجوالتقرب لمحلنا لصيانتها";
            try
            {

           
            string phoneNumber = phoneTextEdit.Text; 
            string command = $"adb shell am start -n \"khicha.dr.smsapp/.MainActivity\" --es \"phone\" \"{phoneNumber}\" --es \"message\" \"\"\"{message}\"\"\"";
            var processInfo = new System.Diagnostics.ProcessStartInfo("cmd.exe", "/C " + command)
            {
                CreateNoWindow = false,  // Do not create a window
                UseShellExecute = false, // Do not use the OS shell
                RedirectStandardOutput = true, // Redirect the standard output (not necessary, but can be useful for debugging)
                RedirectStandardError = true, // Redirect the standard error (not necessary, but can be useful for debugging)
                WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal // Ensure the window is hidden
            };

            using (var process = System.Diagnostics.Process.Start(processInfo))
            {
                process.WaitForExit(); // Wait for the process to exit, ensuring the command completes
            }

            timer2.Enabled = true;
            barButtonItem6.Visibility = BarItemVisibility.Always;
                Thread.Sleep(3000); 
                closapp();
                string cellValue = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[0]).ToString();
                 
                insertinmessagetb(Convert.ToInt32(cellValue), message);
            }
            catch (Exception ex )
            {
                MessageBox.Show(ex.Message); 
                 
            }
        }
       public void closapp()
        {
            // Add command to close the app after sending the SMS
            string stopAppCommand = "adb shell am force-stop khicha.dr.smsapp";
            var stopAppProcessInfo = new System.Diagnostics.ProcessStartInfo("cmd.exe", "/C " + stopAppCommand)
            {
                CreateNoWindow = false,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal
            };

            using (var stopProcess = System.Diagnostics.Process.Start(stopAppProcessInfo))
            {
                stopProcess.WaitForExit(); // Wait for the process to exit, ensuring the command completes
            }

        }
        private void timer2_Tick(object sender, EventArgs e)
        {
            barButtonItem6.Visibility = BarItemVisibility.Never;
            timer2.Enabled = false; 

        }

        private void gridView1_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            try
            {
                if (gridView1.RowCount == 0 )
                {
                    return; 
                }
               
                string   cellValue = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[1]).ToString();

                // Assuming getrestdays expects an object or a specific type, pass cellValue to it
                restdayslbl.Caption =  tabextTableAdapter.getrestdays(cellValue ).ToString();
                if (tabextTableAdapter.getrestdays(cellValue) < 0 )
                {
                    restdayslbl.Caption = "لقد تأخر عن الموعد ";
                    restdayslbl.ItemAppearance.Normal.BackColor = Color.Orange;

                }
                else
                {
                    restdayslbl.ItemAppearance.Normal.BackColor = default;

                }
            }
            catch (Exception)
            {

                
            }
        }

        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            cardview cardview = new cardview();
            cardview.Parameters["clientlbl"].Value = ClientTextEdit.Text;
             cardview.Parameters["clientlbl"].Visible = false;
            //Nbrregist

            cardview.Parameters["dateexperi"].Value = dateexprimitationDateEdit.Text;
            cardview.Parameters["dateexperi"].Visible = false;
            cardview.Parameters["dateveiw"].Value = datedecreationDateEdit.Text;
            cardview.Parameters["dateveiw"].Visible = false;
            int x = Convert.ToInt32(dureTextEdit.Text) / 30;
            cardview.Parameters["durelbl"].Value = "مدة الصلاحية:" +x.ToString("d2")  +" أشهر ";
            cardview.Parameters["durelbl"].Visible = false;
            cardview.Parameters["nbrlink"].Value = NbrTextEdit.Text;
            cardview.Parameters["nbrlink"].Visible = false;
            cardview.Parameters["typeext"].Value = typeextentTextEdit.Text;
            cardview.Parameters["typeext"].Visible = false;
            if (typeviewTextEdit.Text =="تعبئة")
            {
                cardview.Parameters["checkbox1"].Value = true;
                cardview.Parameters["checkbox1"].Visible = false;
                cardview.Parameters["checkbox2"].Value = false;
                cardview.Parameters["checkbox2"].Visible = false;

            }
            else
            {
                if (typeviewTextEdit.Text == "مراقبة")
                {
                    cardview.Parameters["checkbox1"].Value = false;
                    cardview.Parameters["checkbox1"].Visible = false;
                    cardview.Parameters["checkbox2"].Value = true;
                    cardview.Parameters["checkbox2"].Visible = false;
                }
                else
                {
                    cardview.Parameters["checkbox1"].Value = false;
                    cardview.Parameters["checkbox1"].Visible = false;
                    cardview.Parameters["checkbox2"].Value = false;
                    cardview.Parameters["checkbox2"].Visible = false;
                }

            }
           

            cardview.ShowPreview(); 

        }

        private void barButtonItem9_ItemClick(object sender, ItemClickEventArgs e)
        {
            reciept reciept = new reciept();
            reciept.Parameters["datecre"].Value = datedecreationDateEdit.Text;
            reciept.Parameters["datecre"].Visible = false;
            reciept.Parameters["dateexp"].Value =dateexprimitationDateEdit.Text;
            reciept.Parameters["dateexp"].Visible = false;
            reciept.Parameters["nameclient"].Value = ClientTextEdit.Text ;
            reciept.Parameters["nameclient"].Visible = false;
            reciept.Parameters["Nbrregist"].Value = NbrTextEdit.Text;


            reciept.Parameters["typex"].Value = typeextentTextEdit.Text;
            reciept.Parameters["typex"].Visible = false;
            // reciept.Parameters["xrCheckBox2"].Value = true;
            // reciept.Parameters["xrCheckBox1"].Value = false;
            if (typeviewTextEdit.Text == "مراقبة")
            {
            reciept.xrCheckBox2.Checked = true;
            reciept.xrCheckBox1.Checked = false;
            }else
            {         
            reciept.xrCheckBox2.Checked = false;
            reciept.xrCheckBox1.Checked = true;
            }
            reciept.ShowPreview() ; 


        }

        private void barButtonItem10_ItemClick(object sender, ItemClickEventArgs e)
        {
            howtouseit howtouseit = new howtouseit();
            howtouseit.ShowPreview(); 

        }

        private void barButtonItem11_ItemClick(object sender, ItemClickEventArgs e)
        {
           AboutBox1 aboutBox1 = new AboutBox1();
            aboutBox1.ShowDialog(); 

        }
        public static void UploadFileToGoogleDrive(string filePath)
        {
            UserCredential credential;

            using (var stream =
                new FileStream("credentials.json", FileMode.Open, FileAccess.Read))
            {
                string credPath = "token.json";
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
            }

            // Create Drive API service.
            var service = new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = ApplicationName,
            });

            var fileMetadata = new Google.Apis.Drive.v3.Data.File()
            {
                Name = Path.GetFileName(filePath)
            };
            FilesResource.CreateMediaUpload request;
            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                request = service.Files.Create(
                    fileMetadata, stream, "application/octet-stream");
                request.Fields = "id";
                request.Upload();
            }

            var file = request.ResponseBody;
            Console.WriteLine($"File ID: {file.Id}");
        }



        public static string GenerateBackupFileName()
        {
            string timestamp = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string fileName = $"backup{timestamp}.bak";
            return fileName;
        }
        private void barButtonItem12_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                string connectionString = Properties.Settings.Default.ExtanConnectionString;
               // MessageBox.Show(connectionString);

                string databaseName = "Extan";
               // MessageBox.Show(GenerateBackupFileName());
                // Determine the full path to save the backup in the same directory as the application
                string appDirectory = AppDomain.CurrentDomain.BaseDirectory;
                string namdb = GenerateBackupFileName(); 
                string backupFilePath = Path.Combine(appDirectory,namdb );
                splashScreenManager1.ShowWaitForm(); 
                // Step 1: Backup the database
                BackupDatabase(connectionString, databaseName, backupFilePath);

                // Optionally, upload the backup file to Google Drive
                 UploadFileToGoogleDrive(backupFilePath);
                backupTableAdapter1.Insert(namdb, DateTime.Today);
                saveall(); 
                backupTableAdapter1.Fill(dbex.backup);
                splashScreenManager1.CloseWaitForm(); 
                MessageBox.Show($"تم الحفظ بنجاح...");
            }
            catch (Exception ex)
            {
                if (splashScreenManager1.IsSplashFormVisible)
                {
                        splashScreenManager1.CloseWaitForm();
                }
               
                MessageBox.Show($"Error during backup: {ex.Message}");
            }
        }

        private void barButtonItem14_ItemClick(object sender, ItemClickEventArgs e)
        {
            listofsavedb listofsavedb = new listofsavedb();
            listofsavedb.Br = "-1"; 
            listofsavedb.ShowDialog(); 
        }

        private void barButtonItem13_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                // File name of the .bak file on Google Drive
                listofsavedb listofsavedb = new listofsavedb();
                listofsavedb.Text = "اختار قاعدة البيانات المراد تحميلها";
                
                listofsavedb.ShowDialog();
                
                if (listofsavedb.Br =="0" )
                {
                    MessageBox.Show("الرجاء التحقق من قواعد البيانات المسجلة في قوقل درايف"); 
                    return; 
                }
                string fileName = listofsavedb.Br; 
                string backupFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, fileName);
                splashScreenManager1.ShowWaitForm(); 
                // Download the .bak file
                DownloadFileFromGoogleDrive(fileName, backupFilePath);

                // Restore the database
                string connectionString = Properties.Settings.Default.ExtanConnectionString;
                string databaseName = "Extan";

                RestoreDatabase(connectionString, databaseName, backupFilePath);
                splashScreenManager1.CloseWaitForm();

                MessageBox.Show("تم استعادة قاعدة البيانات بنجاح...");
                tabextTableAdapter.Fill(dbex.tabext);
                messagesTableAdapter1.Fill(dbex.messages);
                backupTableAdapter1.Fill(dbex.backup); 
            }
            catch (Exception ex)
            {
                splashScreenManager1.CloseWaitForm();
                MessageBox.Show($"Error during restore: {ex.Message}");
            }
        }
        public static void RestoreDatabase(string connectionString, string databaseName, string backupFilePath)
        {
            // Modify the connection string to initially connect to the 'master' database
            var builder = new SqlConnectionStringBuilder(connectionString)
            {
                InitialCatalog = "master"
            };

            using (var connection = new SqlConnection(builder.ConnectionString))
            {
                connection.Open();

                // Kill all connections to the target database
                var killConnectionsCommand = new SqlCommand(
                    $"DECLARE @kill varchar(8000) = ''; " +
                    $"SELECT @kill = @kill + 'KILL ' + CONVERT(varchar(5), session_id) + ';' " +
                    $"FROM sys.dm_exec_sessions " +
                    $"WHERE database_id = DB_ID('{databaseName}'); " +
                    $"EXEC(@kill);",
                    connection
                );
                killConnectionsCommand.ExecuteNonQuery();

                // Set the target database to single-user mode
                var setSingleUserCommand = new SqlCommand($"ALTER DATABASE [{databaseName}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE", connection);
                setSingleUserCommand.ExecuteNonQuery();

                // Restore the database from the backup file
                var restoreCommand = new SqlCommand($"RESTORE DATABASE [{databaseName}] FROM DISK='{backupFilePath}' WITH REPLACE", connection);
                restoreCommand.ExecuteNonQuery();

                // Set the target database back to multi-user mode
                var setMultiUserCommand = new SqlCommand($"ALTER DATABASE [{databaseName}] SET MULTI_USER", connection);
                setMultiUserCommand.ExecuteNonQuery();

                connection.Close();
            }
        }

        public static string GetFileIdByName(DriveService service, string fileName)
        {
            var request = service.Files.List();
            request.Q = $"name = '{fileName}'";
            request.Fields = "files(id, name)";
            var result = request.Execute();

            var file = result.Files.FirstOrDefault();
            if (file != null)
            {
                return file.Id;
            }
            else
            {
                throw new FileNotFoundException("File not found on Google Drive.");
            }
        }

        public static void DownloadFileFromGoogleDrive(string fileName, string destinationFilePath)
        {
            UserCredential credential;
            using (var stream = new FileStream("credentials.json", FileMode.Open, FileAccess.Read))
            {
                string credPath = "token.json";
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    new[] { DriveService.Scope.DriveReadonly },
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
            }

            var service = new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "ext",
            });

            // Get the file ID by the file name
            string fileId = GetFileIdByName(service, fileName);

            // Request to download the file
            var request = service.Files.Get(fileId);
            var streamRequest = new MemoryStream();
            request.MediaDownloader.ProgressChanged += (Google.Apis.Download.IDownloadProgress progress) =>
            {
                if (progress.Status == Google.Apis.Download.DownloadStatus.Completed)
                {
                    Console.WriteLine("Download completed.");
                }
            };
            request.Download(streamRequest);

            // Write the file to the destination path
            using (var fileStream = new FileStream(destinationFilePath, FileMode.Create, FileAccess.Write))
            {
                streamRequest.WriteTo(fileStream);
            }
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            if (gridView1.RowCount == 0 )
            {
                return; 
            }
            if (MessageBox.Show("هل تريد حذف هذا الملف ؟", "سؤال", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                try
                {
                    int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("Id"));
                   // MessageBox.Show(id.ToString());
                    
                     tabextTableAdapter.De_lete(id);
                    tabextTableAdapter.Fill(dbex.tabext);
                    saveall();
               //     MessageBox.Show("لقد تم الحذف بنجاح "); 

                }
                catch (Exception ex )
                {

                    MessageBox.Show(  "حدثت مشكلة اثناء الحدف.... "+ ex.Message  );

                }

            }
          
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {
            //string cellValue = gridView1.GetRowCellValue(gridView1.FocusedRowHandle, gridView1.Columns[0]).ToString();
           // MessageBox.Show(cellValue);
        }
    }
   
}
